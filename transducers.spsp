(import-from functools [reduce])

(def filter-transducer [pred]
    (lambda [reducing-function]
        (lambda 
            ([] (reducing-function))
            ([acc] (reducing-function acc))
            ([acc element]
                (if (pred element)
                    (reducing-function acc element)
                    acc)))))

(def map-transducer [func]
    (lambda [reducing-function]
        (lambda 
            ([] (reducing-function))
            ([acc] (reducing-function acc))
            ([acc element]
                (reducing-function
                    acc
                    (func element))))))

(def take-transducer [n]
  (lambda [reducing-function]
    (do
        (let n-left n)
        (lambda 
            ([] (reducing-function))
            ([acc] (reducing-function acc))
            ([acc element]
                (if (> n-left 0)
                    (do
                        (rebind n-left (- n-left 1))
                        (reducing-function acc element))
                    acc))))))

(def compose 
    ([fn1 fn2]
        (lambda [reduce-func]
        (fn1 (fn2 reduce-func))))
    ([fn1 fn2 & *rest]
        (compose fn1 (call compose (+ [fn2] (list *rest))))))

(def transduce 
    ([xf f coll]
        (do
            (let reducing-function (xf f))
            (let result (reduce reducing-function coll (reducing-function)))
            (reducing-function result)))
    ([xf f init coll]
        (do
            (let reducing-function (xf f))
            (let result (reduce reducing-function coll init))
            (reducing-function result))))

(def sequence [xf coll]
    (transduce xf append [] coll))

(def make-variadic [op init]
    (lambda [& *args]
        (if *args
            (reduce op *args init)
            init)))
